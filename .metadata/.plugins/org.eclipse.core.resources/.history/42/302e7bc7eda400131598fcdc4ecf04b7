package com.aguggenberger.spacebound.actor;

import com.aguggenberger.spacebound.Assets;
import com.aguggenberger.spacebound.engine.Engine;
import com.aguggenberger.spacebound.resources.SpaceBoundAtlas;
import com.aguggenberger.spacebound.screens.base.GameScreen;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.Actor;

public class PlayerActor extends Actor {	
	
	private float velocity = 0;
    private static final float MAX_VELOCITY = 10;
    private static final float MIN_VELOCITY = -10;
    private static final float VELOCITY_INC = 2;
	private TextureRegion textureRegion;
	
	public PlayerActor(TextureRegion textureRegion) {
		this.textureRegion = textureRegion;
		setBounds(0, 0, textureRegion.getRegionWidth(), textureRegion.getRegionHeight());
	}
	
	@Override
	public void setPosition(float x, float y) {
		// TODO Auto-generated method stub
		
		if (x > getX()) 
			tryMoveRight();
		else if (x < getX())
			tryMoveLeft();
		
		//super.setPosition(x, y);
	}
	
	@Override
	public void draw(SpriteBatch batch, float parentAlpha) {
		batch.draw(textureRegion, getX(), getY(), getOriginX(), getOriginY(), getWidth(), getHeight(), 
                getScaleX(), getScaleY(), getRotation());
	}
	
	public void tryMoveLeft() {
		clearActions();
		if (getActions().size == 0) moveWithVelocity(velocity - VELOCITY_INC);
	}

	private void moveWithVelocity(float value){		
		velocity = value;
		if (velocity > MAX_VELOCITY)
            velocity = MAX_VELOCITY;
        if (velocity < MIN_VELOCITY)
            velocity = MIN_VELOCITY;
        
        //addAction(repeat(moveTo(getX() + velocity, getY()))));
		//addAction(forever(sequence(moveTo(getX() + velocity, getY()))));		
	}
	
	public void tryMoveRight() {
		clearActions();
		if (getActions().size == 0) moveWithVelocity(velocity + VELOCITY_INC);
	}

}
