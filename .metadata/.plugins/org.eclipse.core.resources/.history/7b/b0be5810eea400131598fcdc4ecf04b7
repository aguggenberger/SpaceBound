package com.aguggenberger.spacebound.screens;

import com.aguggenberger.spacebound.actor.PlayerActor;
import com.aguggenberger.spacebound.engine.Level;
import com.aguggenberger.spacebound.resources.SpaceBoundAtlas;
import com.aguggenberger.spacebound.resources.SpaceBoundTexture;
import com.aguggenberger.spacebound.screens.base.StageScreen;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.input.GestureDetector.GestureListener;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Array;

public class LevelScreen extends StageScreen implements GestureListener  {

	private PlayerActor player;
	private Level level;
	public static TextureAtlas atlas;
	public static Array<TextureRegion> meteors;
	public static Array<TextureRegion> powerups;
	public static TextureRegion meteorBrown_big1;
	public static TextureRegion meteorBrown_big2;
	public static TextureRegion meteorBrown_big3;
	public static TextureRegion meteorBrown_big4;
	public static TextureRegion meteorBrown_med1;
	public static TextureRegion meteorBrown_med3;
	public static TextureRegion meteorBrown_small1;
	public static TextureRegion meteorBrown_small2;
	public static TextureRegion meteorBrown_tiny1;
	public static TextureRegion meteorBrown_tiny2;
	public static TextureRegion spaceShip;
	public static Texture background;

	public LevelScreen(Level level) {
		this.level = level;
	}
	
	@Override
	public void show() {
		super.show();
		Gdx.input.setInputProcessor(stage);
		player = new PlayerActor(spaceShip);
		player.scale(.05f);
	    stage.addActor(player);		
	}
	
	@Override
	protected void draw(float delta) {
		//Rendering back ground tiled to texture
		int tileCount = 4;
		batch.begin();
		batch.draw(background, 0, 0,
				background.getWidth() * tileCount, 
				background.getHeight() * tileCount, 
				0, tileCount, tileCount, 0);
		batch.end();
		super.draw(delta);			
	}
	

	@Override
	public void load() {
		background = assets.get(SpaceBoundTexture.BACKGROUND_PURPLE, Texture.class);
		background.setWrap(Texture.TextureWrap.Repeat, Texture.TextureWrap.Repeat);
		
		atlas = assets.get(SpaceBoundAtlas.GAME_ATLAS);
		
		spaceShip = atlas.findRegion(SpaceBoundAtlas.SPACE_SHIP_REGION);
		
		meteors = new Array<TextureRegion>();		
		meteorBrown_big1 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_BIG1_REGION);
		meteors.add(meteorBrown_big1);
		meteorBrown_big2 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_BIG2_REGION);
		meteors.add(meteorBrown_big2);
		meteorBrown_big3 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_BIG3_REGION);
		meteors.add(meteorBrown_big3);
		meteorBrown_big4 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_BIG4_REGION);
		meteors.add(meteorBrown_big4);
		meteorBrown_med1 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_MED1_REGION);
		meteors.add(meteorBrown_med1);
		meteorBrown_med3 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_MED3_REGION);
		meteors.add(meteorBrown_med3);
		meteorBrown_small1 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_SMALL1_REGION);
		meteors.add(meteorBrown_small1);
		meteorBrown_small2 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_SMALL2_REGION);
		meteors.add(meteorBrown_small2);
		meteorBrown_tiny1 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_TINY1_REGION);
		meteors.add(meteorBrown_tiny1);
		meteorBrown_tiny2 = atlas.findRegion(SpaceBoundAtlas.METEOR_BROWN_TINY1_REGION);
		meteors.add(meteorBrown_tiny2);
		powerups = new Array<TextureRegion>(); 
		powerups.add(atlas.findRegion(SpaceBoundAtlas.SILVER_SHEILD_REGION));
	}

	@Override
	protected void unload() {
		meteors.clear();
		atlas.dispose();
		background.dispose();
	}

	@Override
	public boolean touchDown(float x, float y, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean tap(float x, float y, int count, int button) {
		
		log("taps: " + count);
		
		for (int i = 1; i <= count; i++) {
			movePlayer(x, y);								
		}
		
		return false;
	}
	
	private void movePlayer(float x, float y){
		player.setPosition(x, y);

		
	}

	@Override
	public boolean longPress(float x, float y) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean fling(float velocityX, float velocityY, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean pan(float x, float y, float deltaX, float deltaY) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean zoom(float initialDistance, float distance) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean pinch(Vector2 initialPointer1, Vector2 initialPointer2,
			Vector2 pointer1, Vector2 pointer2) {
		// TODO Auto-generated method stub
		return false;
	}
}
